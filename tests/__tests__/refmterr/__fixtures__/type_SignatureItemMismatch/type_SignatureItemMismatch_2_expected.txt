# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml", line 8, characters 24-62:
# Error: Signature mismatch:
#        Modules do not match:
#          sig val createElement3 : 'a -> unit end
#        is not included in
#          Sig
#        The value `createElement2' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml", line 5, characters 2-36:
#          Expected declaration
#        The value `createElement' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml", line 4, characters 2-35:
#          Expected declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml:8:24-10:3 

 5 ┆   val createElement2: string -> unit
 6 ┆ end
 7 ┆ 
 8 ┆ module MyModule : Sig = struct
 9 ┆   let createElement3 s = ()
10 ┆ end

This module is missing the value named createElement

  The following signature requires that createElement be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml:4

This module is missing the value named createElement2

  The following signature requires that createElement2 be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_2.ml:5


Learn: "Signatures" are interfaces that modules may implement.
  You can indicate that a Reason file (.re) implements a signature by
  creating an "interface file" (.rei) of the same name.
  Modules nested inside of a Reason file may also opt into being checked
  against any signature using the type constraint syntax `module M : Sig = ...`


