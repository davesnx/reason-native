# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_7.ml", line 7, characters 24-61:
# Error: Signature mismatch:
#        Modules do not match:
#          sig val createElement : 'a -> unit end
#        is not included in
#          Sig
#        The type `missingType' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_7.ml", line 4, characters 2-31:
#          Expected declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_7.ml:7:24-9:3 

 4 ┆   type 'a missingType = 'a list
 5 ┆ end
 6 ┆ 
 7 ┆ module MyModule : Sig = struct
 8 ┆   let createElement s = ()
 9 ┆ end
10 ┆ 

This module is missing the type named missingType

  The following signature requires that missingType be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_7.ml:4


Learn: "Signatures" are interfaces that modules may implement.
  You can indicate that a Reason file (.re) implements a signature by
  creating an "interface file" (.rei) of the same name.
  Modules nested inside of a Reason file may also opt into being checked
  against any signature using the type constraint syntax `module M : Sig = ...`


