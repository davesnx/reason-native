# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml", line 9, characters 24-59:
# Error: Signature mismatch:
#        Modules do not match:
#          sig val hasWrongType : 'a -> int end
#        is not included in
#          Sig
#        The value `createElement2' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml", line 5, characters 2-36:
#          Expected declaration
#        The type `missingType' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml", line 4, characters 2-31:
#          Expected declaration
#        The value `createElement' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml", line 3, characters 2-35:
#          Expected declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml:9:24-11:3 

 6 ┆   val hasWrongType: string -> unit
 7 ┆ end
 8 ┆ 
 9 ┆ module MyModule : Sig = struct
10 ┆   let hasWrongType s = 0
11 ┆ end
12 ┆ 

This module is missing the value named createElement

  The following signature requires that createElement be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml:3

This module is missing the type named missingType

  The following signature requires that missingType be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml:4

This module is missing the value named createElement2

  The following signature requires that createElement2 be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_3.ml:5


Learn: "Signatures" are interfaces that modules may implement.
  You can indicate that a Reason file (.re) implements a signature by
  creating an "interface file" (.rei) of the same name.
  Modules nested inside of a Reason file may also opt into being checked
  against any signature using the type constraint syntax `module M : Sig = ...`


