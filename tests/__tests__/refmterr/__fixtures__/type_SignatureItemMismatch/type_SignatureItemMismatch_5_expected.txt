# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml", line 6, characters 24-59:
# Error: Signature mismatch:
#        Modules do not match:
#          sig val hasWrongType : 'a -> int end
#        is not included in
#          Sig
#        Values do not match:
#          val hasWrongType : 'a -> int
#        is not included in
#          val hasWrongType :
#            stringParam:string ->
#            intParam:int ->
#            unitParam:unit -> anotherStringParam:string -> unit
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml", line 3, characters 2-109:
#          Expected declaration
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml", line 7, characters 6-18:
#          Actual declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml:6:24-8:3 

3 ┆   val hasWrongType: stringParam:string -> intParam:int -> unitParam:unit -> anotherStringParam:string -> unit
4 ┆ end
5 ┆ 
6 ┆ module MyModule : Sig = struct
7 ┆   let hasWrongType s = 0
8 ┆ end
9 ┆ 

This module doesn't match its signature because the value hasWrongType has the wrong type

  At tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml:3
  the signature required that hasWrongType be of type:

  (
    ~stringParam: string,
    ~intParam: int,
    ~unitParam: unit,
    ~anotherStringParam: string
  ) =>
  unit


  At tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_5.ml:7
  your module defined hasWrongType having type:

  'a => int




