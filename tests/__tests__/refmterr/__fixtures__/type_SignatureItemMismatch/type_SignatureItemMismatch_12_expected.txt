# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.ml", line 1:
# Error: The implementation tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.ml
#        does not match the interface tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.cmi:
#        The type `wrongType' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.mli", line 3, characters 0-22:
#          Expected declaration
#        The type `wrongArity' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.mli", line 2, characters 0-23:
#          Expected declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.ml:1 0-0 

1 ┆ (* Test wrongly specified values but from interface *)
2 ┆ let createElement s = 0
3 ┆ let createEleml ent2 s = "hi"

This module is missing the type named wrongArity

  The following signature requires that wrongArity be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.mli:2

This module is missing the type named wrongType

  The following signature requires that wrongType be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_12.mli:3


Learn: "Signatures" are interfaces that modules may implement.
  You can indicate that a Reason file (.re) implements a signature by
  creating an "interface file" (.rei) of the same name.
  Modules nested inside of a Reason file may also opt into being checked
  against any signature using the type constraint syntax `module M : Sig = ...`


