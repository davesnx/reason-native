# Unformatted Error Output:
# File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_1.ml", line 6, characters 24-62:
# Error: Signature mismatch:
#        Modules do not match:
#          sig val createElement2 : 'a -> unit end
#        is not included in
#          Sig
#        The value `createElement' is required but not provided
#        File "tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_1.ml", line 3, characters 2-35:
#          Expected declaration


 ERROR  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_1.ml:6:24-8:3 

3 ┆   val createElement: string -> unit
4 ┆ end
5 ┆ 
6 ┆ module MyModule : Sig = struct
7 ┆   let createElement2 s = ()
8 ┆ end

This module is missing the value named createElement

  The following signature requires that createElement be defined:
  tests/__tests__/refmterr/__fixtures__/type_SignatureItemMismatch/type_SignatureItemMismatch_1.ml:3


Learn: "Signatures" are interfaces that modules may implement.
  You can indicate that a Reason file (.re) implements a signature by
  creating an "interface file" (.rei) of the same name.
  Modules nested inside of a Reason file may also opt into being checked
  against any signature using the type constraint syntax `module M : Sig = ...`


